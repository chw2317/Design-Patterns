====================	工厂模式	====================
1.适用场景：
	将拥有共性的产品抽象封装到工厂类中统一进行管理和创建，以达到降低使用者与产品之间的耦合度
	
	
2.三种不同的结构类型：
	简单工厂模式（静态工厂模式）
	工厂方法模式
	抽象工厂模式
	
	
====================	简单工厂模式（静态工厂模式）	====================
1.适用场景：
	工厂类负责创建的对象比较少，项目需求简单，产品很少并且几乎没有扩展可能性的情况；
	客户只知道传入工厂类的参数，对于如何创建对象（逻辑）不关心。


2.组成部分（四个角色）：
	Product（抽象产品） 封装产品对象的公有方法。
	ConcreteProduct（具体产品） 抽象产品的具体化。
	Factory（工厂） 实现创建所有产品实例的内部逻辑。
	
	
3.优缺点：
	优点：达到了解耦用户与产品的效果。
	缺点：工厂类负责所有对象的创建逻辑，该类出问题整个系统挂掉；
		系统扩展困难，一旦添加新产品就不得不修改工厂逻辑（不符合设计模式的开闭原则：对扩展开放，对修改关闭）；
		简单工厂模式由于使用了静态工厂方法，所以工厂角色无法形成基于继承的等级结构。
	
	
====================	工厂方法模式	====================
1.适用场景：
	复杂对象生成；
	当需要系统有比较好的扩展性时，可以考虑工厂模式，不同的产品用不同的实现工厂来组装；


2.优缺点：
	在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上
	增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。
	由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度。


====================	抽象工厂模式	====================



































